"""Curator module for transforming raw datasets into curated core tables.

The :class:`Curator` class reads raw data generated by collectors and
produces normalised, deduplicated core tables. Missing columns are
automatically added with ``None`` values to ensure consistent schema
across different chains or versions.
"""

from __future__ import annotations

from pathlib import Path
from typing import Dict
import pandas as pd
from common.storage import part_path, write_rows, read_any

class Curator:
    """Transforms raw ingest tables into curated core tables.

    :param cfg: Configuration dictionary containing ``chain_id`` and ``network``.
      Optional keys ``root`` and ``format`` specify the output location and
      format (``"parquet"`` by default).
    """

    def __init__(self, cfg: Dict[str, str]) -> None:
        self.chain_id: str = cfg["chain_id"]
        self.network: str = cfg["network"]
        self.root: Path = Path(cfg.get("root", "data"))
        self.format: str = cfg.get("format", "parquet")

    def _read(self, table: str, date: str) -> pd.DataFrame:
        """Helper to read a raw table for the given date."""
        return read_any(self.root, "raw", table, self.chain_id, self.network, date)

    def curate(self, ingest_date: str) -> None:
        """Run the curation process for all core tables on a given date."""
        date = ingest_date
        # blocks -> block_core
        rb = self._read("blocks", date)
        if not rb.empty:
            cols = [
                "chain_id",
                "network",
                "height_or_slot",
                "epoch",
                "block_hash",
                "parent_hash",
                "proposer_index",
                "proposer_address",
                "timestamp_utc",
            ]
            for c in cols:
                if c not in rb.columns:
                    rb[c] = None
            out = part_path(
                self.root, "curated", "block_core", self.chain_id, self.network, date
            )
            write_rows(rb[cols].drop_duplicates(), out, self.format)
        # validators -> validator_core
        rv = self._read("validators", date)
        if not rv.empty:
            cols = [
                "chain_id",
                "network",
                "snapshot_ts",
                "validator_id",
                "status",
                "balance",
                "effective_balance",
                "pubkey",
            ]
            for c in cols:
                if c not in rv.columns:
                    rv[c] = None
            out = part_path(
                self.root, "curated", "validator_core", self.chain_id, self.network, date
            )
            write_rows(rv[cols].drop_duplicates(), out, self.format)
        # attestations -> attestation_core
        ra = self._read("attestations", date)
        if not ra.empty:
            cols = [
                "chain_id",
                "network",
                "height_or_slot",
                "epoch",
                "committee_index",
                "head_block_root",
                "source_epoch",
                "target_epoch",
            ]
            for c in cols:
                if c not in ra.columns:
                    ra[c] = None
            out = part_path(
                self.root, "curated", "attestation_core", self.chain_id, self.network, date
            )
            write_rows(ra[cols].drop_duplicates(), out, self.format)
        # penalties -> penalty_core
        rp = self._read("penalties", date)
        if not rp.empty:
            cols = [
                "chain_id",
                "network",
                "height_or_slot",
                "validator_id",
                "penalty_type",
                "value",
                "meta_json",
            ]
            for c in cols:
                if c not in rp.columns:
                    rp[c] = None
            out = part_path(
                self.root, "curated", "penalty_core", self.chain_id, self.network, date
            )
            write_rows(rp[cols].drop_duplicates(), out, self.format)
